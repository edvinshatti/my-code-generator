Declare	@Schema		nVarchar(200)
Set	@Schema		= N'SCHMNAME'

Declare	@TableName		nVarchar(200)
Set	@TableName		= N'TBLNAME'

Declare	@ProcedureType		nVarchar(100)
Set	@ProcedureType		= N'PROCTYPE'

Declare	@Result		Varchar(Max)
Declare	@PrimaryKey	nVarchar(100)

Set	@PrimaryKey	= Stuff((Select	N' ' + ccu.COLUMN_NAME
					From	INFORMATION_SCHEMA.TABLE_CONSTRAINTS		tc
							Inner	Join
						INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE	ccu
							On	tc.CONSTRAINT_NAME	= ccu.CONSTRAINT_NAME	And
								tc.TABLE_NAME	= @TableName	And
								tc.CONSTRAINT_TYPE	= 'PRIMARY KEY'
					For Xml Path('')), 1, 1, '')

Declare	@PrimaryKeyDataType	nVarchar(100)
Select	@PrimaryKeyDataType	= 	Data_Type
					From	INFORMATION_SCHEMA.COLUMNS
					Where	TABLE_NAME	= @TableName	And
						COLUMN_NAME	= @PrimaryKey

Create	Table	#items(id int identity, val nvarchar(Max))

Set	@Result	= N'/*************************************************
 *
 * Generated By xCode code generator
 *
 * Table: ' + @TableName + N'
 *
 *************************************************/

'
 Print @Result

 SET NOCOUNT ON;
 Insert #items	(val)
	values	(@Result)
SET NOCOUNT OFF;
/********************************
 *
 * Create
 *
 ********************************/

Select @Result = 	
@ProcedureType + N'	Procedure	' + @Schema + '.' + @TableName + N'_Save'

If	@ProcedureType	<> 'Drop'
Begin

Select	@Result = @Result 
+
Replace(Stuff((Select	--N'@' 
	+ N',.@'
	+ Column_Name
	+ N'		'
	+ DATA_TYPE
	+
	Case
		When DATA_TYPE	<> 'nvarchar' And DATA_TYPE <> 'varchar' And DATA_TYPE <> 'decimal'  And CHARACTER_MAXIMUM_LENGTH Is Null	Then	N''
		When (DATA_TYPE	= 'nvarchar' Or DATA_TYPE = 'varchar' Or DATA_TYPE = 'varbinary') And CHARACTER_MAXIMUM_LENGTH = -1	Then	N'(Max)'
		When DATA_TYPE	= 'decimal'	Then	N'(' + Convert(nVarchar, NUMERIC_PRECISION) + N', ' + Convert(nVarchar, NUMERIC_SCALE) + N')'
		Else						N'(' + Convert(nVarchar, CHARACTER_MAXIMUM_LENGTH) + N')'
	End
	From	INFORMATION_SCHEMA.COLUMNS
	Where		TABLE_SCHEMA	= @Schema
		And	TABLE_NAME	= @TableName
	For	Xml	Path('')), 1, 1, ''), '.', CHAR(13) + CHAR(10))
+N'
As
	If	Exists	(Select	Id
				From	' + @Schema + N'.' + @TableName + N'
				Where	Id	= @Id)
	Begin
		Update	' + @Schema + N'.' + @TableName + N'
			Set	'+
				Replace(Stuff(
				(Select	N',.' + COLUMN_NAME + N'		= @' + COLUMN_NAME
					From	INFORMATION_SCHEMA.COLUMNS
					Where		TABLE_SCHEMA	= @Schema
						And	TABLE_NAME	= @TableName
						And	COLUMNPROPERTY(OBJECT_ID(@Schema + N'.' + @TableName), COLUMN_NAME, 'IsIdentity') != 1
					For Xml Path(''))
				, 1, 2, N''), '.', CHAR(13) + CHAR(10) + N'				' )
			+'
			Where	' + 	--Id	= @Id
			@PrimaryKey + N'	= @' + @PrimaryKey
			+ N'
			
			Select	@' + @PrimaryKey + N'
			Return	0
	End
	Else
	Begin
		Insert	' + @Schema + N'.' + @TableName + N'	('
		+ 
			Stuff(
				(Select	N', ' + COLUMN_NAME
					From	INFORMATION_SCHEMA.COLUMNS
					Where		TABLE_SCHEMA	= @Schema
						And	TABLE_NAME	= @TableName
						And	COLUMNPROPERTY(OBJECT_ID(@Schema + N'.' + @TableName), COLUMN_NAME, 'IsIdentity') != 1
					For Xml Path(''))
				, 1, 2, N'')
		+')
			Values			('
			+
				Stuff(
					(Select	N', @' + COLUMN_NAME
						From	INFORMATION_SCHEMA.COLUMNS
						Where	TABLE_NAME	= @TableName
							And	COLUMNPROPERTY(OBJECT_ID(@Schema + N'.' + @TableName), COLUMN_NAME, 'IsIdentity') != 1
						For Xml Path(''))
					, 1, 2, N'')
			
			+')
		
		Select	SCOPE_IDENTITY()
		Return	0
	End
'

End

Set	@Result = @Result + '
GO
'

Print @Result

SET NOCOUNT ON;
Insert #items	(val)
	values	(@Result)
SET NOCOUNT OFF;
/********************************
 *
 * Read
 *
 ********************************/
Select	@Result	=	@ProcedureType	+ N'	Procedure	' + @Schema + N'.' + @TableName + N'_SelectAll'

If	@ProcedureType	<> 'Drop'
Begin

Select	@Result = @Result +
N'
As
	Select	'
	+ Stuff(
		Replace(
			(Select	N',.			'
				+ Column_Name
				From	INFORMATION_SCHEMA.COLUMNS
				Where		TABLE_SCHEMA	= @Schema
					And	TABLE_NAME	= @TableName
				For	Xml	Path(''))
			, '.', Char(13) + CHAR(10))
		,1, 1, '')
	+ N'
	From	'
	+ @Schema + N'.' + @TableName
	+ N'
'
End

Set	@Result = @Result + '
GO
'

Print @Result

SET NOCOUNT ON;
Insert #items	(val)
	values	(@Result)
SET NOCOUNT OFF;
---------------------------------------------------------------------------------------------------------------
Select	@Result	=	@ProcedureType	+ N'	Procedure	' + @Schema + N'.' + @TableName + N'_SelectById'
If	@ProcedureType	<> 'Drop'
Begin

Select	@Result = @Result +
N'
@' + @PrimaryKey	+ N'		' + @PrimaryKeyDataType
+ N'
As
	Select	'
	+ Stuff(
		Replace(
			(Select	N',.			'
				+ Column_Name
				From	INFORMATION_SCHEMA.COLUMNS
				Where		TABLE_SCHEMA	= @Schema
					And	TABLE_NAME	= @TableName
				For	Xml	Path(''))
			, '.', Char(13) + CHAR(10))
		,1, 1, '')
	+ N'
	From	'
	+ @Schema + N'.' + @TableName
	+ N'
	Where	'
	+ @PrimaryKey
	+ N'	= @'
	+ @PrimaryKey
	+ N'
'
End

Set	@Result = @Result + '
GO
'

Print @Result

SET NOCOUNT ON;
Insert #items	(val)
	values	(@Result)
SET NOCOUNT OFF;
---------------------------------------------------------------------------------------------------------------------
Select	@Result	=	@ProcedureType	+ N'	Procedure	' + @Schema + N'.' + @TableName + N'_Search'

If	@ProcedureType	<> 'Drop'
Begin

Select	@Result = @Result +
+
Replace(Stuff((Select	--N'@' 
	+ N',.@'
	+ Column_Name
	+ N'		'
	+ DATA_TYPE
	+
	Case
		When DATA_TYPE	<> 'nvarchar' And DATA_TYPE <> 'varchar' And DATA_TYPE <> 'decimal'  And CHARACTER_MAXIMUM_LENGTH Is Null	Then	N''
		When (DATA_TYPE	= 'nvarchar' Or DATA_TYPE = 'varchar' Or DATA_TYPE = 'varbinary') And CHARACTER_MAXIMUM_LENGTH = -1	Then	N'(Max)'
		When DATA_TYPE	= 'decimal'	Then	N'(' + Convert(nVarchar, NUMERIC_PRECISION) + N', ' + Convert(nVarchar, NUMERIC_SCALE) + N')'
		Else						N'(' + Convert(nVarchar, CHARACTER_MAXIMUM_LENGTH) + N')'
	End
	+ N' = NULL'
	From	INFORMATION_SCHEMA.COLUMNS
	Where		TABLE_SCHEMA	= @Schema
		And	TABLE_NAME	= @TableName
	For	Xml	Path('')), 1, 1, ''), '.', CHAR(13) + CHAR(10))
+N'
As
	Select	'
	+ Stuff(
		Replace(
			(Select	N',.			'
				+ Column_Name
				From	INFORMATION_SCHEMA.COLUMNS
				Where		TABLE_SCHEMA	= @Schema
					And	TABLE_NAME	= @TableName
				For	Xml	Path(''))
			, '.', Char(13) + CHAR(10))
		,1, 1, '')
	+ N'
	From	'
	+ @Schema + N'.' + @TableName
	+ N'
	Where
	'
	+ Replace(Stuff(Replace((Select	
				+ N'.;And		(@' + Column_Name + N' Is Null Or ' + COLUMN_NAME + N' = @' + COLUMN_NAME + N')	'
				From	INFORMATION_SCHEMA.COLUMNS
				Where		TABLE_SCHEMA	= @Schema
					And	TABLE_NAME	= @TableName
				For	Xml	Path('')), '.', CHAR(13) + CHAR(10)), 1, 6, '	'), ';', N'		')
+N'
'
End

Set	@Result = @Result + '
GO
'

Print @Result

SET NOCOUNT ON;
Insert #items	(val)
	values	(@Result)
SET NOCOUNT OFF;
/********************************
 *
 * Delete
 *
 ********************************/
Select	@Result	=	@ProcedureType + N'	Procedure	' + @Schema + N'.' + @TableName + N'_DeleteBy' + @PrimaryKey

If	@ProcedureType	<> 'Drop'
Begin

Select	@Result = @Result +
N'
@' + @PrimaryKey	+ N'		' + @PrimaryKeyDataType
+ N'
As
	Delete	From	'
	+ @Schema + N'.' + @TableName
	+ N'
	Where	'
	+ @PrimaryKey
	+ N'	= @'
	+ @PrimaryKey
	+ N'
'

End

Set	@Result = @Result + '
GO
'

Print @Result

SET NOCOUNT ON;
Insert #items	(val)
	values	(@Result)
SET NOCOUNT OFF;

Select	@Result	=	@ProcedureType + N'	Procedure	' + @Schema + N'.' + @TableName + N'_LogicalDeleteBy' + @PrimaryKey

If	@ProcedureType	<> 'Drop'
Begin

Select	@Result = @Result +
N'
@' + @PrimaryKey	+ N'		' + @PrimaryKeyDataType
+ N'
As
	Update	' + @Schema + N'.' + @TableName
	+ N'
	Set	IsDeleted = 1
	Where	'
	+ @PrimaryKey
	+ N'	= @'
	+ @PrimaryKey
	+ N'
	Select	@' + @PrimaryKey + N'
	Return	0
'

End

Set	@Result = @Result + '
GO
'

Print @Result

SET NOCOUNT ON;
Insert #items	(val)
	values	(@Result)
SET NOCOUNT OFF;
----------------------------------------------------------------------------------------------

Select	val
	From	#items
	order by id

Drop	Table	#items
